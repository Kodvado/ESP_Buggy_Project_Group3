/**
 * @file main.cpp
 * @brief Autonomous Line Follower Program
 */

#include "C12832.h"
#include "QEI.h"
#include "mbed.h"

C12832 lcd(D11, D13, D12, D7, D10);  ///< LCD display object
InterruptIn FirePressed(D4);        ///< Interrupt for motor driver board enable

class SensorArray
{
protected:
    bool readOff;
    int readErrorValueState, singleReadState;
    double sensor1Val, sensor2Val, sensor3Val, sensor4Val, sensor5Val, sensor6Val;
    double sample1Val, sample2Val, sample3Val, sample4Val, sample5Val, sample6Val;
    Ticker getValue;
    AnalogIn sensor1In, sensor2In, sensor3In, sensor4In, sensor5In, sensor6In;
    DigitalOut LED1Out, LED2Out, LED3Out, LED4Out, LED5Out, LED6Out;
public:
    SensorArray(PinName s1, PinName s2, PinName s3, PinName s4, PinName s5, PinName s6, PinName l1,
     PinName l2, PinName l3, PinName l4, PinName l5, PinName l6) : sensor1In(s1), sensor2In(s2), sensor3In(s3), 
     sensor4In(s4), sensor5In(s5), sensor6In(s6), LED1Out(l1), LED2Out(l2), LED3Out(l3), LED4Out(l4), LED5Out(l5), LED6Out(l6) {
        readOff = true;
        readErrorValueState = 1;
        singleReadState = 1;
        sLEDOff(1);
        sLEDOff(2);
        sLEDOff(3);
        sLEDOff(4);
        sLEDOff(5);
        sLEDOff(6);
        sensor1Val = 0;
        sensor2Val = 0;
        sensor3Val = 0;
        sensor4Val = 0;
        sensor5Val = 0;
        sensor6Val = 0;
        sample1Val = 0;
        sample2Val = 0;
        sample3Val = 0;
        sample4Val = 0;
        sample5Val = 0;
        sample6Val = 0;
    };
    double getSensorVolts(int i){
        switch (i) {
        case 1:
            return sensor1In.read()*3.3;
            break;
        case 2:
            return sensor2In.read()*3.3;
            break;
        case 3:
            return sensor3In.read()*3.3;
            break;
        case 4:
            return sensor4In.read()*3.3;
            break;
        case 5:
            return sensor5In.read()*3.3;
            break;
        case 6:
            return sensor6In.read()*3.3;
            break;
        }
    }

    void sLEDOn(int i){
        switch (i) {
        case 1:
            LED1Out = 1;
            break;
        case 2:
            LED2Out = 1;
            break;
        case 3:
            LED3Out = 1;
            break;
        case 4:
            LED4Out = 1;
            break;
        case 5:
            LED5Out = 1;
            break;
        case 6:
            LED6Out = 1;
            break;
        }
    } 
    void sLEDOff(int i){
        switch (i) {
        case 1:
            LED1Out = 0;
            break;
        case 2:
            LED2Out = 0;
            break;
        case 3:
            LED3Out = 0;
            break;
        case 4:
            LED4Out = 0;
            break;
        case 5:
            LED5Out = 0;
            break;
        case 6:
            LED6Out = 0;
            break;
        }
    }
    void toggleRead(void){
        if (readOff){
            getValue.attach_us(callback(this, &SensorArray::readErrorValue), 150000);
            readOff = false;
        } else {
            getValue.detach();
            readOff = true;
        }
    }
    void toggleReadSingle(void){
        if (readOff){
            getValue.attach_us(callback(this, &SensorArray::singleRead), 1500);
            readOff = false;
        } else {
            getValue.detach();
            readOff = true;
        }
    }
    void readErrorValue(void){
        switch (readErrorValueState){
        case 1:
            sLEDOn(1);
            sLEDOn(3);
            sLEDOn(5);
            readErrorValueState = 2;
            break;
        case 2:
            sensor1Val = getSensorVolts(1);
            sensor3Val = getSensorVolts(3);
            sensor5Val = getSensorVolts(5);
            sLEDOff(1);
            sLEDOff(3);
            sLEDOff(5);
            sLEDOn(2);
            sLEDOn(4);
            sLEDOn(6);
            readErrorValueState = 3;
            break;
        case 3:
            sensor2Val = getSensorVolts(2);
            sensor4Val = getSensorVolts(4);
            sensor6Val = getSensorVolts(6);
            sLEDOff(2);
            sLEDOff(4);
            sLEDOff(6);
            sLEDOn(1);
            sLEDOn(3);
            sLEDOn(5);
            readErrorValueState = 2;
            sample1Val = sensor1Val;
            sample2Val = sensor2Val;
            sample3Val = sensor3Val;
            sample4Val = sensor4Val;
            sample5Val = sensor5Val;
            sample6Val = sensor6Val;
            break;
        }
    }
    double getErrorValue(void){
        return ((3*sample1Val)+(2*sample2Val)+sample3Val)-(sample4Val+(2*sample5Val)+(3*sample6Val));
    }
    void singleRead(void){
        switch (singleReadState){
            case 1:
            sLEDOn(1);
            singleReadState = 2;
            break;
            case 2:
            sensor1Val = getSensorVolts(1);
            sLEDOff(1);
            sLEDOn(2);
            singleReadState = 3;
            break;
            case 3:
            sensor2Val = getSensorVolts(2);
            sLEDOff(2);
            sLEDOn(3);
            singleReadState = 4;
            break;
            case 4:
            sensor3Val = getSensorVolts(3);
            sLEDOff(3);
            sLEDOn(4);
            singleReadState = 5;
            break;
            case 5:
            sensor4Val = getSensorVolts(4);
            sLEDOff(4);
            sLEDOn(5);
            singleReadState = 6;
            break;
            case 6:
            sensor5Val = getSensorVolts(5);
            sLEDOff(5);
            sLEDOn(6);
            singleReadState = 7;
            break;
            case 7:
            sensor6Val = getSensorVolts(6);
            sLEDOff(6);
            sLEDOn(1);
            singleReadState = 2;
            sample1Val = sensor1Val;
            sample2Val = sensor2Val;
            sample3Val = sensor3Val;
            sample4Val = sensor4Val;
            sample5Val = sensor5Val;
            sample6Val = sensor6Val;
            break;
            }
        return;
    };
};

/**
 * @class unipolarmotor
 * @brief Represents a unipolar motor with PWM control
 */
class unipolarmotor
{
public:
    PwmOut pwm;         ///< PWM output for motor speed control
    DigitalOut dir;     ///< Direction control for motor rotation

    /**
     * @brief Constructor to initialize the motor with PWM and direction pins
     * @param pwmPin Pin for PWM control
     * @param dirPin Pin for direction control
     */
    unipolarmotor(PinName pwmPin, PinName dirPin) : pwm(pwmPin), dir(dirPin)
    {
        pwm.period(0.00004);  // Set PWM period
        dir = 0;              // Initialize direction as default
    }

    /**
     * @brief Change the direction of the motor
     */
    void changeDirection()
    {
        dir = !dir;
    }
};

unipolarmotor leftMotor(D9, D2);    ///< Left motor object
unipolarmotor rightMotor(D5, PA_13);///< Right motor object

DigitalOut EnableMDB(D8);           ///< Motor driver board enable
DigitalOut Bipolar1(PB_13);         ///< Bipolar control 1
DigitalOut Bipolar2(PB_14);         ///< Bipolar control 2

int LeftPulse = 0;                  ///< Left encoder pulse count
int RightPulse = 0;                 ///< Right encoder pulse count
int Left_lastPulse = 0;             ///< Last recorded left encoder pulse
int Right_lastPulse = 0;            ///< Last recorded right encoder pulse
float L_defaultPPS = 3500;           ///< Target PPS for left motor
float L_targetPPS;
float R_defaultPPS = 3500;           ///< Target PPS for right motor
float R_targetPPS;
float L_defaultPWM = 0.70;          ///< Default PWM for left motor
float R_defaultPWM = 0.70;          ///< Default PWM for right motor
float vs1, vs2, vs3, vs4, vs5, vs6;  ///< Voltage readings from line sensors
float lineSensorError = 0.0;        ///< Error calculated from line sensor values
float positiveTurnLimit = 0.5;
float negativeTurnLimit = -0.5;

QEI leftEncoder(PC_8, PC_6, NC, 256, QEI::X4_ENCODING);   ///< Left motor encoder
QEI rightEncoder(PC_2, PC_3, NC, 256, QEI::X4_ENCODING); ///< Right motor encoder

Ticker encoderTicker;               ///< Ticker for encoder update

/**
 * @brief Update encoder pulse counts and calculate speed
 */
void updateEncoders()
{
    float temp1 = leftEncoder.getPulses();
    float temp2 = rightEncoder.getPulses();
    LeftPulse = temp1 - Left_lastPulse;
    Left_lastPulse = temp1;
    RightPulse = temp2 - Right_lastPulse;
    Right_lastPulse = temp2;
    if (LeftPulse > 50000 || RightPulse > 50000)
    {
        leftEncoder.reset();
        rightEncoder.reset();
        Left_lastPulse = 0;
        Right_lastPulse = 0;
    }
}

AnalogIn lineSensor1(A0);   ///< Analog input for line sensor 1
AnalogIn lineSensor2(A1);   ///< Analog input for line sensor 2
AnalogIn lineSensor3(A2);   ///< Analog input for line sensor 3
AnalogIn lineSensor4(A3);   ///< Analog input for line sensor 4
AnalogIn lineSensor5(A4);   ///< Analog input for line sensor 5
AnalogIn lineSensor6(A5);   ///< Analog input for line sensor 6

/**
 * @brief Update line sensor readings
 */
void updateSensors()
{
    vs1 = lineSensor1.read();
    vs2 = lineSensor2.read();
    vs3 = lineSensor3.read();
    vs4 = lineSensor4.read();
    vs5 = lineSensor5.read();
    vs6 = lineSensor6.read();
}

/**
 * @brief Enable the motor driver board
 */
void enableMotorDriverBoard()
{
    EnableMDB = !EnableMDB;
}

/**
 * @brief Stop both motors
 */
void motorStop()
{
    leftMotor.pwm = 0;
    rightMotor.pwm = 0;
}

float integral_left = 0;          ///< Integral term for left motor PID controller
float previous_error_left = 0;    ///< Previous error for left motor PID controller

float integral_right = 0;         ///< Integral term for right motor PID controller
float previous_error_right = 0;   ///< Previous error for right motor PID controller


/**
 * @brief PID controller to compute motor control output
 * @param error Error value to control
 * @param integral Integral component of PID
 * @param previous_error Previous error for derivative component
 * @param dt Time interval
 * @param Kp Proportional gain
 * @param Ki Integral gain
 * @param Kd Derivative gain
 * @return PID output
 */
float PID_controller(float error, float &integral, float &previous_error, float dt, float Kp, float Ki, float Kd)
{
    integral += error * dt;
    float derivative = (error - previous_error) / dt;
    float output = Kp * error + Ki * integral + Kd * derivative;
    previous_error = error;
    if (output > 1)
    {
        output = 1;
    }
    else if (output < 0)
    {
        output = 0;
    }
    return output;
}

/**
 * @brief Main function
 * @return Program exit status
 */
int main()
{
    EnableMDB = 0;
    FirePressed.rise(&enableMotorDriverBoard);
    leftEncoder.reset();
    rightEncoder.reset();

    Bipolar1 = 0;
    Bipolar2 = 0;

    leftMotor.dir = 1;
    rightMotor.dir = 0;

    float RM_Kp = 0.1;   // Proportional gain of right motor
    float RM_Ki = 0.1;   // Integral gain of right motor
    float RM_Kd = 0.1;   // Derivative gain of right motor
    float LM_Kp = 0.1;   // Proportional gain of left motor
    float LM_Ki = 0.1;   // Integral gain of left motor
    float LM_Kd = 0.1;   // Derivative gain of left motor

    float dt = 0.01;
    float PPSChange = 500;

    float currentLeftPPS, currentRightPPS, LeftM_error, RightM_error;

    SensorArray sennyArray(PC_2, PC_3, A2, A3, A4, A5, D15, D14, D2, D3, D4, D5);
    sennyArray.toggleReadSingle();
    // Wait for motor driver board activation
    while (EnableMDB == 0)
    {
        wait(0.1);
    }
    motorStop();  // Stop motors initially

    // Main control loop
    while (1)
    {

        if (sennyArray.getErrorValue() > positiveTurnLimit)
        {
            L_targetPPS = L_defaultPPS - PPSChange;
            R_targetPPS = R_defaultPPS + PPSChange;
        }
        else if (sennyArray.getErrorValue() < negativeTurnLimit)
        {
            L_targetPPS = L_defaultPPS + PPSChange;
            R_targetPPS = R_defaultPPS - PPSChange;
        }
        else
        {
            L_targetPPS = L_defaultPPS;
            R_targetPPS = R_defaultPPS;
        }

        updateEncoders();

        // Calculate current speeds in PPS (pulses per second)
        currentLeftPPS = LeftPulse * 100;
        currentRightPPS = RightPulse * 100;

        LeftM_error = L_targetPPS - currentLeftPPS;
        RightM_error = R_targetPPS - currentRightPPS;

        // Control motor speeds using PID controller
        leftMotor.pwm = PID_controller(LeftM_error, integral_left, previous_error_left, dt, LM_Kp, LM_Ki, LM_Kd);
        rightMotor.pwm = PID_controller(RightM_error, integral_right, previous_error_right, dt, RM_Kp, RM_Ki, RM_Kd);

        wait(dt); // Wait for a while
    }

    return 0;
}
